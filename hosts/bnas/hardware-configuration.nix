# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.kernelPackages = pkgs.linuxKernel.packages.linux_6_16;
  boot.initrd.availableKernelModules = [
    "ahci"
    "nvme"
    "xhci_pci"
    "thunderbolt"
    "usbhid"
    "usb_storage"
    "sd_mod"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  boot.supportedFilesystems.zfs = true;
  boot.initrd.supportedFilesystems.zfs = true;

  services.zfs = {
    autoScrub = {
      enable = true;
      pools = [ "tank" ];
    };
    autoSnapshot.enable = true;

  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/A15E-548B";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  fileSystems."/" = {
    device = "tank/root";
    fsType = "zfs";
  };

  fileSystems."/nix" = {
    device = "tank/nix";
    fsType = "zfs";
  };
  fileSystems."/home" = {
    device = "tank/home";
    fsType = "zfs";
  };
  fileSystems."/home/shammas" = {
    device = "tank/home/shammas";
    fsType = "zfs";
  };
  fileSystems."/home/nowossjolka" = {
    device = "tank/home/nowossjolka";
    fsType = "zfs";
  };
  fileSystems."/mnt/data" = {
    device = "tank/data";
    fsType = "zfs";
  };
  fileSystems."/mnt/data/media" = {
    device = "tank/data/media";
    fsType = "zfs";
  };
  fileSystems."/var/lib/nixos-containers" = {
    device = "tank/nixos-containers";
    fsType = "zfs";
  };
  fileSystems."/var/lib/nixos-containers/seed" = {
    device = "tank/nixos-containers/seed";
    fsType = "zfs";
  };
  fileSystems."/mnt/data/.state/nixarr" = {
    device = "tank/data/nixarr";
    fsType = "zfs";
  };

  swapDevices = [ ];
  zramSwap.enable = true;

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp196s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  hardware.firmware = [ pkgs.linux-firmware ];
  hardware.graphics.enable = true;
  hardware.graphics.enable32Bit = true;
  hardware.amdgpu.initrd.enable = true;
  hardware.amdgpu.opencl.enable = true;
}
